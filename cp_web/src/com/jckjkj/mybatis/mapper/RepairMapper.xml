<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jckjkj.mybatis.dao.RepairMapper" >
  <resultMap id="BaseResultMap" type="com.jckjkj.mybatis.model.Repair" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="orderid" property="orderid" jdbcType="VARCHAR" />
    <result column="material" property="material" jdbcType="VARCHAR" />
    <result column="count" property="count" jdbcType="VARCHAR" />
    <result column="repaircontent" property="repaircontent" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.jckjkj.mybatis.model.Repair" extends="BaseResultMap" >
    <result column="repairphoto" property="repairphoto" jdbcType="BINARY" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, orderid, material, count, repaircontent
  </sql>
  <sql id="Blob_Column_List" >
    repairphoto
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.jckjkj.mybatis.model.RepairExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from x_repair
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jckjkj.mybatis.model.RepairExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from x_repair
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from x_repair
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from x_repair
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jckjkj.mybatis.model.RepairExample" >
    delete from x_repair
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jckjkj.mybatis.model.Repair" >
    insert into x_repair (id, orderid, material, 
      count, repaircontent, repairphoto
      )
    values (#{id,jdbcType=INTEGER}, #{orderid,jdbcType=VARCHAR}, #{material,jdbcType=VARCHAR}, 
      #{count,jdbcType=VARCHAR}, #{repaircontent,jdbcType=VARCHAR}, #{repairphoto,jdbcType=BINARY}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jckjkj.mybatis.model.Repair" >
    insert into x_repair
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="orderid != null" >
        orderid,
      </if>
      <if test="material != null" >
        material,
      </if>
      <if test="count != null" >
        count,
      </if>
      <if test="repaircontent != null" >
        repaircontent,
      </if>
      <if test="repairphoto != null" >
        repairphoto,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderid != null" >
        #{orderid,jdbcType=VARCHAR},
      </if>
      <if test="material != null" >
        #{material,jdbcType=VARCHAR},
      </if>
      <if test="count != null" >
        #{count,jdbcType=VARCHAR},
      </if>
      <if test="repaircontent != null" >
        #{repaircontent,jdbcType=VARCHAR},
      </if>
      <if test="repairphoto != null" >
        #{repairphoto,jdbcType=BINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jckjkj.mybatis.model.RepairExample" resultType="java.lang.Integer" >
    select count(*) from x_repair
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update x_repair
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderid != null" >
        orderid = #{record.orderid,jdbcType=VARCHAR},
      </if>
      <if test="record.material != null" >
        material = #{record.material,jdbcType=VARCHAR},
      </if>
      <if test="record.count != null" >
        count = #{record.count,jdbcType=VARCHAR},
      </if>
      <if test="record.repaircontent != null" >
        repaircontent = #{record.repaircontent,jdbcType=VARCHAR},
      </if>
      <if test="record.repairphoto != null" >
        repairphoto = #{record.repairphoto,jdbcType=BINARY},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update x_repair
    set id = #{record.id,jdbcType=INTEGER},
      orderid = #{record.orderid,jdbcType=VARCHAR},
      material = #{record.material,jdbcType=VARCHAR},
      count = #{record.count,jdbcType=VARCHAR},
      repaircontent = #{record.repaircontent,jdbcType=VARCHAR},
      repairphoto = #{record.repairphoto,jdbcType=BINARY}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update x_repair
    set id = #{record.id,jdbcType=INTEGER},
      orderid = #{record.orderid,jdbcType=VARCHAR},
      material = #{record.material,jdbcType=VARCHAR},
      count = #{record.count,jdbcType=VARCHAR},
      repaircontent = #{record.repaircontent,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jckjkj.mybatis.model.Repair" >
    update x_repair
    <set >
      <if test="orderid != null" >
        orderid = #{orderid,jdbcType=VARCHAR},
      </if>
      <if test="material != null" >
        material = #{material,jdbcType=VARCHAR},
      </if>
      <if test="count != null" >
        count = #{count,jdbcType=VARCHAR},
      </if>
      <if test="repaircontent != null" >
        repaircontent = #{repaircontent,jdbcType=VARCHAR},
      </if>
      <if test="repairphoto != null" >
        repairphoto = #{repairphoto,jdbcType=BINARY},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.jckjkj.mybatis.model.Repair" >
    update x_repair
    set orderid = #{orderid,jdbcType=VARCHAR},
      material = #{material,jdbcType=VARCHAR},
      count = #{count,jdbcType=VARCHAR},
      repaircontent = #{repaircontent,jdbcType=VARCHAR},
      repairphoto = #{repairphoto,jdbcType=BINARY}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jckjkj.mybatis.model.Repair" >
    update x_repair
    set orderid = #{orderid,jdbcType=VARCHAR},
      material = #{material,jdbcType=VARCHAR},
      count = #{count,jdbcType=VARCHAR},
      repaircontent = #{repaircontent,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>